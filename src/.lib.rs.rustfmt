
#[cfg(test)]
mod tests {
    #[test]
    fn test() {

        let str = String::from("0123456789abcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz");

        let mut chars = str.chars();
        let str_length = str.len();

        println!("str_length: {}", str_length);

        let non_zeros = (str_length * 8 + 1 + 64);

        let zeros = (((non_zeros / 512) + 1) * 512) - non_zeros;

        // let zeros = 512 - (str_length * 8 + 1 + 64) - ((str_length * 8 + 1 + 64) / 512) * 512;
        println!("padding zeros: {}", zeros);

        let mut w = 0;

        for i in 0..((str_length / 4) * 4) {

            let c = chars.nth(0).unwrap();

            w = w | u32::from(c) << (3 - (i % 4)) * 8;
            
            if (i % 4 == 3) {
                println!("{}: {:08x}", i, w);
                w = 0;
            }
        }

        if str_length % 4 != 0 {
        let mut index = 0;
        let tail: u32;
        loop {
            match chars.next() {
                Some(c) => {
                    w = w | u32::from(c) << (3 - (index % 4)) * 8;
                    index = index + 1
                },
                None => break
            }
        }
        tail = ( (3- index % 4) * 8) + 7;

        w = w | 1 << tail;
            println!("we have: {} zeros", tail);
        } else {
            tail = 31;
            w = 1 << 31;
            println!("we have: {} zeros", tail);
        }

        let zero_appends = (zeros - tail) / 8;

        println!("char zeros to add:{}", zero_appends);

        // println!("end: {:08x}", w);
        show_binary(&w);

        let a: u64 = (str_length as u64) * 8;

        let b = (a >> 32) as u32;
        let c = a as u32;

        println!("{:016x}: {:08x}, {:08x}", a, b, c );

        assert!(false);

    } 

    fn show_binary(n: &u32) -> String {
        let raw_string = format!("{:032b}", n);
        let mut chars = raw_string.chars();
        let mut i = 0;
        let mut result = String::new();
        loop {
            match chars.next() {
                Some(c) => {
                    result.push(c);
                },
                None => break
            }

            if i % 8 == 7 {
                result.push(' ');
            }
                    i = i + 1;
        }


        println!("{}", result);
        String::from("hello")
    }

}
